package main

import (
	"encoding/json"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gocolly/colly"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"time"
)

type Auto struct {
	Brand string
	Age   string
	Cost  string

	Mileage      string
	Transmission string
	EnginePower  string
	EnginesType  string
	DriveUnit    string

	DromLink string
	IsSell   string
}

var (
	towns = map[string]string{
		"–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π":                    "https://auto.drom.ru/region22/all/",
		"–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                  "https://auto.drom.ru/region28/all/",
		"–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":             "https://auto.drom.ru/region29/all/",
		"–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region30/all/",
		"–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region31/all/",
		"–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                  "https://auto.drom.ru/region32/all/",
		"–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region33/all/",
		"–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":             "https://auto.drom.ru/region34/all/",
		"–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region35/all/",
		"–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region36/all/",
		"–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å":      "https://auto.drom.ru/region79/all/",
		"–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π":                "https://auto.drom.ru/region101/all/",
		"–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region37/all/",
		"–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region38/all/",
		"–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞":   "https://auto.drom.ru/region7/all/",
		"–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":           "https://auto.drom.ru/region39/all/",
		"–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region40/all/",
		"–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π":                   "https://auto.drom.ru/region41/all/",
		"–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞":   "https://auto.drom.ru/region9/all/",
		"–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region42/all/",
		"–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region43/all/",
		"–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region44/all/",
		"–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π":                "https://auto.drom.ru/region23/all/",
		"–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π":                 "https://auto.drom.ru/region24/all/",
		"–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region45/all/",
		"–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                   "https://auto.drom.ru/region46/all/",
		"–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":             "https://auto.drom.ru/region47/all/",
		"–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                  "https://auto.drom.ru/region48/all/",
		"–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region49/all/",
		"–ú–æ—Å–∫–≤–∞":                            "https://auto.drom.ru/region77/all/",
		"–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region50/all/",
		"–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region51/all/",
		"–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥":         "https://auto.drom.ru/region83/all/",
		"–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":             "https://auto.drom.ru/region52/all/",
		"–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region53/all/",
		"–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":             "https://auto.drom.ru/region54/all/",
		"–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                    "https://auto.drom.ru/region55/all/",
		"–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region56/all/",
		"–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region57/all/",
		"–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region58/all/",
		"–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π":                     "https://auto.drom.ru/region59/all/",
		"–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π":                   "https://auto.drom.ru/region25/all/",
		"–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region60/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è":                 "https://auto.drom.ru/region1/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π":                  "https://auto.drom.ru/region4/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω":           "https://auto.drom.ru/region2/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è":                "https://auto.drom.ru/region3/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω":               "https://auto.drom.ru/region5/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è":              "https://auto.drom.ru/region6/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è":               "https://auto.drom.ru/region8/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è":                "https://auto.drom.ru/region10/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏":                   "https://auto.drom.ru/region11/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º":                   "https://auto.drom.ru/region102/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª":               "https://auto.drom.ru/region12/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è":               "https://auto.drom.ru/region13/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)":          "https://auto.drom.ru/region14/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è":        "https://auto.drom.ru/region15/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω":              "https://auto.drom.ru/region16/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞":                   "https://auto.drom.ru/region17/all/",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è":                "https://auto.drom.ru/region19/all/",
		"–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region61/all/",
		"–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region62/all/",
		"–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region63/all/",
		"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":                   "https://auto.drom.ru/region78/all/",
		"–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region64/all/",
		"–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region65/all/",
		"–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":              "https://auto.drom.ru/region66/all/",
		"–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region67/all/",
		"–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π":               "https://auto.drom.ru/region26/all/",
		"–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                "https://auto.drom.ru/region68/all/",
		"–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                  "https://auto.drom.ru/region69/all/",
		"–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                   "https://auto.drom.ru/region70/all/",
		"–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                  "https://auto.drom.ru/region71/all/",
		"–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":                 "https://auto.drom.ru/region72/all/",
		"–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞":             "https://auto.drom.ru/region18/all/",
		"–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region73/all/",
		"–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π":                  "https://auto.drom.ru/region27/all/",
		"–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥": "https://auto.drom.ru/region86/all/",
		"–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region74/all/",
		"–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞":              "https://auto.drom.ru/region20/all/",
		"–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞":              "https://auto.drom.ru/region21/all/",
		"–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥":        "https://auto.drom.ru/region87/all/",
		"–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥":   "https://auto.drom.ru/region89/all/",
		"–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":               "https://auto.drom.ru/region76/all/",
	}
	currentFile     string = "products.json"
	newFileName     string = "productsNew.json"
	numericKeyboard        = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –º–∞—à–∏–Ω–∞ " + "\u27A1"),
			//tgbotapi.NewKeyboardButton("üíî"),
		),
	)
)

func main() {
	bot, err := tgbotapi.NewBotAPI("")
	if err != nil {
		log.Panic(err)
	}

	autos := make([]Auto, 0)
	//auto := Auto{}
	bot.Debug = true
	autos = readerJson(autos, currentFile)
	//fmt.Println(autos[1])
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	i := 0
	updates := bot.GetUpdatesChan(u)
	for update := range updates {
		//mysql_db.InsertUserInfo(int(update.Message.Chat.ID))
		var (
			url_town      string = "https://auto.drom.ru/region50/all/"
			selectArea    bool   = false
			toStart       bool   = false
			notifications bool   = false
		)

		if selectArea == false && notifications == false {
			go webScraper(&url_town)
		}

		if update.Message != nil { // If we got a message
			autos = readerJson(autos, currentFile)
			if selectArea == false && notifications == false {
				switch update.Message.Text {
				case "–°–ª–µ–¥—É—é—â–∞—è –º–∞—à–∏–Ω–∞ \u27A1":
					i = compareFiles(autos[i], currentFile, newFileName)
					autos = readerJson(autos, currentFile)
					if i != len(autos) {
						if i == 0 && toStart == true {
							i++
							toStart = false
						} else if i != 0 && toStart == false {
							i++
						}
						log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
						replyMain := string("–ú–∞—Ä–∫–∞: " + autos[i].Brand + "\n" + "–ì–æ–¥: " + autos[i].Age + "\n" + "–ü—Ä–æ–±–µ–≥: " + autos[i].Mileage + "\n\n")
						replyCosts := string("–¶–µ–Ω–∞: " + autos[i].Cost + "\n" + "–°—Ç–∞—Ç—É—Å: " + autos[i].IsSell + "\n" + "–°—Å—ã–ª–∫–∞: " + autos[i].DromLink + "\n\n")
						replyEngine := string("–ü—Ä–∏–≤–æ–¥: " + autos[i].EnginesType + "\n" + "–ö–ü–ü: " + autos[i].Transmission + "\n" + "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].EnginePower + "\n" + "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].DriveUnit)
						reply := replyMain + replyCosts + replyEngine
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
						msg.ReplyToMessageID = update.Message.MessageID
						msg.ReplyMarkup = numericKeyboard
						bot.Send(msg)
						if i == 0 && toStart == false {
							i++
						}
					} else if i == len(autos) {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –º–∞—à–∏–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ñ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ :)")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
						i = 0
					}
				case "/help":
					reply1 := "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—à–∏–Ω –Ω–∞–∂–º–∏ –Ω–∞ '–°–ª–µ–¥—É—é—â–∞—è –º–∞—à–∏–Ω–∞ \u27A1 \n\n"
					reply2 := "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /to_start \n\n"
					reply3 := "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /filter (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–µ–º)\n\n"
					reply4 := "–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /update (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–µ–º\n\n"
					reply := reply1 + reply2 + reply3 + reply4
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
				case "/to_start":
					i = compareFiles(autos[i], currentFile, newFileName)
					autos = readerJson(autos, currentFile)
					i = 0
					toStart = true
					reply := "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞.\n"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
					if i != len(autos) {
						//i++
						log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
						replyMain := string("–ú–∞—Ä–∫–∞: " + autos[i].Brand + "\n" + "–ì–æ–¥: " + autos[i].Age + "\n" + "–ü—Ä–æ–±–µ–≥: " + autos[i].Mileage + "\n\n")
						replyCosts := string("–¶–µ–Ω–∞: " + autos[i].Cost + "\n" + "–°—Ç–∞—Ç—É—Å: " + autos[i].IsSell + "\n" + "–°—Å—ã–ª–∫–∞: " + autos[i].DromLink + "\n\n")
						replyEngine := string("–ü—Ä–∏–≤–æ–¥: " + autos[i].EnginesType + "\n" + "–ö–ü–ü: " + autos[i].Transmission + "\n" + "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].EnginePower + "\n" + "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].DriveUnit)
						reply = replyMain + replyCosts + replyEngine
						msg = tgbotapi.NewMessage(update.Message.Chat.ID, reply)
						msg.ReplyToMessageID = update.Message.MessageID
						//msg.ReplyMarkup = numericKeyboard
						bot.Send(msg)
					} else if i == len(autos) {
						msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –º–∞—à–∏–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ñ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ :)")
						msg.ReplyToMessageID = update.Message.MessageID
						bot.Send(msg)
						i = 0
					}
				case "/start":
					reply1 := "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –º–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ –≤–≤–µ–¥–∏ /help \n\n"
					reply2 := "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—à–∏–Ω –Ω–∞–∂–º–∏ –Ω–∞ '–°–ª–µ–¥—É—é—â–∞—è –º–∞—à–∏–Ω–∞ \u27A1 \n\n"
					reply := reply1 + reply2
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
				case "/select_area":
					selectArea = true
					reply := "–î–æ—Å—Ç–ø—É–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤: \n\n"
					var town string
					for key, _ := range towns {
						town += key + "\n"
					}
					//msg.ReplyMarkup = numericKeyboard
					reply_end := "\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –Ω–∞–ø–∏—à–∏ '–æ—Ç–º–µ–Ω–∞' \n"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply+town+reply_end)
					//
					bot.Send(msg)
				case "/notice_on":
					notifications = true
					reply := "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç 'notice_off'"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					//
					bot.Send(msg)
				default:
					reply := "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
				}
			} else if selectArea == true && notifications == false {
				if val, ok := towns[update.Message.Text]; ok {
					url_town = val
					reply := "–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è..."
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					//msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
					webScraper_min(&url_town)
					i = compareFiles(autos[i], currentFile, newFileName)
					autos = readerJson(autos, currentFile)
					if i == 0 && toStart == true {
						i++
						toStart = false
					} else if i != 0 && toStart == false {
						i++
					}
					log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
					replyMain := string("–ú–∞—Ä–∫–∞: " + autos[i].Brand + "\n" + "–ì–æ–¥: " + autos[i].Age + "\n" + "–ü—Ä–æ–±–µ–≥: " + autos[i].Mileage + "\n\n")
					replyCosts := string("–¶–µ–Ω–∞: " + autos[i].Cost + "\n" + "–°—Ç–∞—Ç—É—Å: " + autos[i].IsSell + "\n" + "–°—Å—ã–ª–∫–∞: " + autos[i].DromLink + "\n\n")
					replyEngine := string("–ü—Ä–∏–≤–æ–¥: " + autos[i].EnginesType + "\n" + "–ö–ü–ü: " + autos[i].Transmission + "\n" + "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].EnginePower + "\n" + "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + autos[i].DriveUnit)
					reply = replyMain + replyCosts + replyEngine
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					msg.ReplyToMessageID = update.Message.MessageID
					msg.ReplyMarkup = numericKeyboard
					bot.Send(msg)
					if i == 0 && toStart == false {
						i++
					}
					selectArea = false
				} else if update.Message.Text == "–æ—Ç–º–µ–Ω–∞" || update.Message.Text == "–û—Ç–º–µ–Ω–∞" {
					if selectArea == true {
						selectArea = false
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω")
						bot.Send(msg)
						msg.ReplyMarkup = numericKeyboard
					} else {
						reply := "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
						msg.ReplyMarkup = numericKeyboard
						bot.Send(msg)
					}
				} else {
					reply := "–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–æ—Ç–º–µ–Ω–∞'"
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
					bot.Send(msg)
				}
			} else if selectArea == false && notifications == true {
				if update.Message != nil {
					if update.Message.Text == "/notice_off" {
						reply := "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
						notifications = false
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
						msg.ReplyMarkup = numericKeyboard
						bot.Send(msg)
						break
					} else {
						webScraper_min(&url_town)

						oldAutos := make([]Auto, 0)
						newAutos := make([]Auto, 0)

						oldFile, err := os.Open(currentFile)
						if err != nil {
							log.Fatal(err)
						}

						defer oldFile.Close()

						oldData, err := ioutil.ReadAll(oldFile)

						jsonErrOld := json.Unmarshal(oldData, &oldAutos)

						if err != nil {
							log.Fatal(err)
						}

						if jsonErrOld != nil {
							log.Fatal(jsonErrOld)
						}

						newFile, err := os.Open(newFileName)
						if err != nil {
							log.Fatal(err)
						}

						defer newFile.Close()

						newData, err := ioutil.ReadAll(newFile)

						if err != nil {
							log.Fatal(err)
						}
						jsonErrNew := json.Unmarshal(newData, &newAutos)

						if jsonErrNew != nil {
							log.Fatal(jsonErrNew)
						}
						for j := range newAutos {
							if oldAutos[0].DromLink == newAutos[j].DromLink {
								break
							} else {
								replyMain := string("–ú–∞—Ä–∫–∞: " + newAutos[j].Brand + "\n" + "–ì–æ–¥: " + newAutos[j].Age + "\n" + "–ü—Ä–æ–±–µ–≥: " + newAutos[j].Mileage + "\n\n")
								replyCosts := string("–¶–µ–Ω–∞: " + newAutos[j].Cost + "\n" + "–°—Ç–∞—Ç—É—Å: " + newAutos[j].IsSell + "\n" + "–°—Å—ã–ª–∫–∞: " + newAutos[j].DromLink + "\n\n")
								replyEngine := string("–ü—Ä–∏–≤–æ–¥: " + newAutos[j].EnginesType + "\n" + "–ö–ü–ü: " + newAutos[j].Transmission + "\n" + "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + newAutos[j].EnginePower + "\n" + "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: " + newAutos[j].DriveUnit)
								reply := replyMain + replyCosts + replyEngine
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
								//msg.ReplyMarkup = numericKeyboard
								bot.Send(msg)
							}
						}
						js, err := json.MarshalIndent(newAutos, "", "    ")
						if err != nil {
							log.Fatal(err)
						}
						fmt.Println("Writing data to file")
						if err = os.WriteFile("products.json", js, 0664); err == nil {
							fmt.Println("Data written to file successfully")
						}
					}
				}
			}
		}
	}
}

func readerJson(autos []Auto, file string) []Auto {
	filename, err := os.Open(file)
	if err != nil {
		log.Fatal(err)
	}

	defer filename.Close()

	data, err := ioutil.ReadAll(filename)

	if err != nil {
		log.Fatal(err)
	}
	jsonErr := json.Unmarshal(data, &autos)

	if jsonErr != nil {
		log.Fatal(jsonErr)
	}
	//fmt.Println(autos)
	return autos
}

func webScraper(url *string) {
	for {
		// Instantiate default collector
		c := colly.NewCollector(
		//colly.AllowedDomains("coingecko.com"),
		)
		autos := make([]Auto, 0)
		auto := Auto{}
		//flats := make([]Flat, 0)
		c.OnHTML("a.css-5l099z.ewrty961", func(e *colly.HTMLElement) {
			link := e.Attr("href")
			//fmt.Println(link)
			auto.DromLink = link
			e.ForEach("div.css-13ocj84.e727yh30", func(i int, z *colly.HTMLElement) {
				z.ForEach("div", func(i int, u *colly.HTMLElement) {
					if u.ChildText("div.css-r91w5p.e3f4v4l2") == "" {
						u.ForEach("div.css-17lk78h.e3f4v4l2", func(i int, v *colly.HTMLElement) {
							title := v.ChildText("span")
							nameAndDate := strings.Split(title, ", ")
							auto.Brand = nameAndDate[0]
							auto.Age = nameAndDate[1]
							auto.IsSell = "–ü—Ä–æ–¥–∞—ë—Ç—Å—è"
						})
					} else {
						u.ForEach("div.css-r91w5p.e3f4v4l2", func(i int, v *colly.HTMLElement) {
							title := v.ChildText("span")
							nameAndDate := strings.Split(title, ", ")
							auto.Brand = nameAndDate[0]
							auto.Age = nameAndDate[1]
							auto.IsSell = "–°–Ω—è—Ç —Å –ø—Ä–æ–∂–∞–∂–∏"
						})
					}
				})
				z.ForEach("div.css-1fe6w6s.e162wx9x0", func(i int, v *colly.HTMLElement) {
					description := v.ChildText("span.css-1l9tp44.e162wx9x0")
					//description := v.ChildText("span.css-1l9tp44.e162wx9x0")
					//description = strings.ReplaceAll(description, " ", "")
					descriptionArr := strings.Split(description, ",")

					for j := range descriptionArr {
						if strings.Contains(descriptionArr[j], "–ª.—Å") {
							auto.EnginePower = descriptionArr[j]
						} else if strings.Contains(descriptionArr[j], "–ê–ö–ü–ü") || strings.Contains(descriptionArr[j], "–º–µ—Ö–∞–Ω–∏–∫–∞") || strings.Contains(descriptionArr[j], "—Ä–æ–±–æ—Ç") || strings.Contains(descriptionArr[j], "–≤–∞—Ä–∏–∞—Ç–æ—Ä") {
							auto.Transmission = descriptionArr[j]
						} else if strings.Contains(descriptionArr[j], "–±–µ–Ω–∑–∏–Ω") || strings.Contains(descriptionArr[j], "–¥–∏–∑–µ–ª—å") || strings.Contains(descriptionArr[j], "–≥–∏–±—Ä–∏–¥") {
							auto.DriveUnit = descriptionArr[j]
						} else if strings.Contains(descriptionArr[j], "–ø–µ—Ä–µ–¥–Ω–∏–π") || strings.Contains(descriptionArr[j], "–∑–∞–¥–Ω–∏–π") || strings.Contains(descriptionArr[j], "4DW") {
							auto.EnginesType = descriptionArr[j]
						} else if strings.Contains(descriptionArr[j], "—Ç—ã—Å. –∫–º") {
							descriptionArr[j] = strings.ReplaceAll(descriptionArr[j], "\u003c", "–º–µ–Ω–µ–µ")
							auto.Mileage = descriptionArr[j]
						}

					}
				})
			})
			e.ForEach("div.css-1dkhqyq.ep0qbyc0", func(i int, z *colly.HTMLElement) {
				z.ForEach("div", func(i int, u *colly.HTMLElement) {
					u.ForEach("div.css-1i8tk3y.eyvqki92", func(i int, v *colly.HTMLElement) {
						v.ForEach("div.css-1dv8s3l.eyvqki91", func(i int, p *colly.HTMLElement) {
							p.ForEach("span.css-46itwz.e162wx9x0", func(i int, r *colly.HTMLElement) {
								costs := r.Text
								costs = strings.ReplaceAll(costs, "\u00a0", "")
								//fmt.Println(costs)
								auto.Cost = costs
								//fmt.Println(costs)
							})
						})
					})
				})
			})

			autos = append(autos, auto)
		})
		c.OnHTML("a.css-4gbnjj.e24vrp30", func(e *colly.HTMLElement) {
			nextPage := e.Request.AbsoluteURL(e.Attr("href"))
			c.Visit(nextPage)
		})
		c.OnScraped(func(r *colly.Response) {
			fmt.Println("Finished", r.Request.URL)
			js, err := json.MarshalIndent(autos, "", "    ")
			if err != nil {
				log.Fatal(err)
			}
			fmt.Println("Writing data to file")
			if err = os.WriteFile(newFileName, js, 0664); err == nil {
				fmt.Println("Data written to file successfully")
			}

		})

		c.OnResponse(func(r *colly.Response) {
			fmt.Println(r.StatusCode)
		})

		// Before making a request print "Visiting ..."
		numVisited := 0
		// Before making a request print "Visiting ..."
		c.OnRequest(func(r *colly.Request) {
			fmt.Println("Visiting", r.URL.String())
			if numVisited > 30 {
				r.Abort()
			}
			numVisited++
		})

		c.Limit(&colly.LimitRule{
			// Filter domains affected by this rule
			DomainGlob: "*",
			// Set a delay between requests to these domains
			Delay: (1 * time.Second) / 3,
			// Add an additional random delay
			//RandomDelay: 1 * time.Second,
		})

		c.Visit(*url)

		time.Sleep((180 * time.Second) / 2)
		//i = compareFiles(currentFile, newFileName)
	}
}

func compareFiles(auto Auto, currentFile string, newFile string) int {

	newAutos := make([]Auto, 0)
	newFileName, err := os.Open(newFile)
	if err != nil {
		log.Fatal(err)
	}

	defer newFileName.Close()

	newData, err := ioutil.ReadAll(newFileName)

	if err != nil {
		log.Fatal(err)
	}
	jsonErrNew := json.Unmarshal(newData, &newAutos)

	if jsonErrNew != nil {
		log.Fatal(jsonErrNew)
	}
	var k int = 0
	for j := range newAutos {
		if auto.DromLink == newAutos[j].DromLink {
			k = j
			break
		}
	}
	js, err := json.MarshalIndent(newAutos, "", "    ")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Writing data to file")
	if err = os.WriteFile("products.json", js, 0664); err == nil {
		fmt.Println("Data written to file successfully")
	}
	return k
}

func webScraper_min(url *string) {
	// Instantiate default collector
	d := colly.NewCollector(
	//colly.AllowedDomains("coingecko.com"),
	)
	autos := make([]Auto, 0)
	auto := Auto{}
	//flats := make([]Flat, 0)
	d.OnHTML("a.css-5l099z.ewrty961", func(e *colly.HTMLElement) {
		link := e.Attr("href")
		//fmt.Println(link)
		auto.DromLink = link
		e.ForEach("div.css-13ocj84.e727yh30", func(i int, z *colly.HTMLElement) {
			z.ForEach("div", func(i int, u *colly.HTMLElement) {
				if u.ChildText("div.css-r91w5p.e3f4v4l2") == "" {
					u.ForEach("div.css-17lk78h.e3f4v4l2", func(i int, v *colly.HTMLElement) {
						title := v.ChildText("span")
						nameAndDate := strings.Split(title, ", ")
						auto.Brand = nameAndDate[0]
						auto.Age = nameAndDate[1]
						auto.IsSell = "–ü—Ä–æ–¥–∞—ë—Ç—Å—è"
					})
				} else {
					u.ForEach("div.css-r91w5p.e3f4v4l2", func(i int, v *colly.HTMLElement) {
						title := v.ChildText("span")
						nameAndDate := strings.Split(title, ", ")
						auto.Brand = nameAndDate[0]
						auto.Age = nameAndDate[1]
						auto.IsSell = "–°–Ω—è—Ç —Å –ø—Ä–æ–∂–∞–∂–∏"
					})
				}
			})
			z.ForEach("div.css-1fe6w6s.e162wx9x0", func(i int, v *colly.HTMLElement) {
				description := v.ChildText("span.css-1l9tp44.e162wx9x0")
				//description := v.ChildText("span.css-1l9tp44.e162wx9x0")
				//description = strings.ReplaceAll(description, " ", "")
				descriptionArr := strings.Split(description, ",")

				for j := range descriptionArr {
					if strings.Contains(descriptionArr[j], "–ª.—Å") {
						auto.EnginePower = descriptionArr[j]
					} else if strings.Contains(descriptionArr[j], "–ê–ö–ü–ü") || strings.Contains(descriptionArr[j], "–º–µ—Ö–∞–Ω–∏–∫–∞") || strings.Contains(descriptionArr[j], "—Ä–æ–±–æ—Ç") || strings.Contains(descriptionArr[j], "–≤–∞—Ä–∏–∞—Ç–æ—Ä") {
						auto.Transmission = descriptionArr[j]
					} else if strings.Contains(descriptionArr[j], "–±–µ–Ω–∑–∏–Ω") || strings.Contains(descriptionArr[j], "–¥–∏–∑–µ–ª—å") || strings.Contains(descriptionArr[j], "–≥–∏–±—Ä–∏–¥") {
						auto.DriveUnit = descriptionArr[j]
					} else if strings.Contains(descriptionArr[j], "–ø–µ—Ä–µ–¥–Ω–∏–π") || strings.Contains(descriptionArr[j], "–∑–∞–¥–Ω–∏–π") || strings.Contains(descriptionArr[j], "4DW") {
						auto.EnginesType = descriptionArr[j]
					} else if strings.Contains(descriptionArr[j], "—Ç—ã—Å. –∫–º") {
						descriptionArr[j] = strings.ReplaceAll(descriptionArr[j], "\u003c", "–º–µ–Ω–µ–µ")
						auto.Mileage = descriptionArr[j]
					}

				}
			})
		})
		e.ForEach("div.css-1dkhqyq.ep0qbyc0", func(i int, z *colly.HTMLElement) {
			z.ForEach("div", func(i int, u *colly.HTMLElement) {
				u.ForEach("div.css-1i8tk3y.eyvqki92", func(i int, v *colly.HTMLElement) {
					v.ForEach("div.css-1dv8s3l.eyvqki91", func(i int, p *colly.HTMLElement) {
						p.ForEach("span.css-46itwz.e162wx9x0", func(i int, r *colly.HTMLElement) {
							costs := r.Text
							costs = strings.ReplaceAll(costs, "\u00a0", "")
							//fmt.Println(costs)
							auto.Cost = costs
							//fmt.Println(costs)
						})
					})
				})
			})
		})

		autos = append(autos, auto)
	})
	d.OnHTML("a.css-4gbnjj.e24vrp30", func(e *colly.HTMLElement) {
		nextPage := e.Request.AbsoluteURL(e.Attr("href"))
		d.Visit(nextPage)
	})
	d.OnScraped(func(r *colly.Response) {
		fmt.Println("Finished", r.Request.URL)
		js, err := json.MarshalIndent(autos, "", "    ")
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println("Writing data to file")
		if err = os.WriteFile(newFileName, js, 0664); err == nil {
			fmt.Println("Data written to file successfully")
		}

	})

	d.OnResponse(func(r *colly.Response) {
		fmt.Println(r.StatusCode)
	})

	// Before making a request print "Visiting ..."
	numVisited := 0
	// Before making a request print "Visiting ..."
	d.OnRequest(func(r *colly.Request) {
		fmt.Println("Visiting", r.URL.String())
		if numVisited > 5 {
			r.Abort()
		}
		numVisited++
	})

	d.Limit(&colly.LimitRule{
		// Filter domains affected by this rule
		DomainGlob: "*",
		// Set a delay between requests to these domains
		Delay: (1 * time.Second) / 2,
		// Add an additional random delay
		//RandomDelay: 1 * time.Second,
	})

	d.Visit(*url)

	//time.Sleep((180 * time.Second) / 2)
	//i = compareFiles(currentFile, newFileName)
}
